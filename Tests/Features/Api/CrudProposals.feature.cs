// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features.Api
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Crud Proposals")]
    public partial class CrudProposalsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CrudProposals.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Api", "Crud Proposals", "    As a user,\r\n    I want to be sure\r\n    that I can create, update, and delete " +
                    "proposals\r\n    so that I can manage pet proposals efficiently.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new proposal")]
        [NUnit.Framework.Retry(3)]
        [NUnit.Framework.CategoryAttribute("API")]
        public void CreateANewProposal()
        {
            string[] tagsOfScenario = new string[] {
                    "API"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new proposal", "    As a user,\r\n    I want to create a new proposal\r\n    so that I can add it to " +
                    "the available proposals.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "PetName",
                            "Prop[Вид тварини]",
                            "Prop[Різновид]",
                            "Prop[Стать]",
                            "Price",
                            "Location",
                            "Age",
                            "AgeUnits",
                            "Summary"});
                table1.AddRow(new string[] {
                            "Cute Dog needs family",
                            "Сірко",
                            "Собаки",
                            "Лабрадор-ретрівер",
                            "Хлопчик",
                            "100",
                            "Харків",
                            "120",
                            "30",
                            "Search for home for Rex"});
#line 12
  testRunner.Given("I have created a proposal with the following details", ((string)(null)), table1, "Given ");
#line hidden
#line 15
  testRunner.Then("the proposal should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
  testRunner.And("the proposal details should match the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new proposal with random values")]
        [NUnit.Framework.Retry(3)]
        [NUnit.Framework.CategoryAttribute("API")]
        public void CreateANewProposalWithRandomValues()
        {
            string[] tagsOfScenario = new string[] {
                    "API"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new proposal with random values", "    As a user,\r\n    I want to create a proposal with random values\r\n    so that I" +
                    " can quickly test proposal creation with various data.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "PetName",
                            "Prop[Вид тварини, Різновид]",
                            "Prop[Стать]",
                            "Price",
                            "Location",
                            "Age",
                            "AgeUnits",
                            "Summary"});
                table2.AddRow(new string[] {
                            "Random[Sentence]",
                            "Random[FirstName]",
                            "Random[Specie,Breed]",
                            "Random[Gender]",
                            "Random[Double(1,100)]",
                            "Random[City]",
                            "365",
                            "365",
                            "Random[Sentence]"});
#line 23
  testRunner.Given("I have created a proposal with random values", ((string)(null)), table2, "Given ");
#line hidden
#line 26
  testRunner.Then("the proposal should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
  testRunner.And("the proposal details should match the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a proposal")]
        [NUnit.Framework.Retry(3)]
        [NUnit.Framework.CategoryAttribute("API")]
        public void UpdateAProposal()
        {
            string[] tagsOfScenario = new string[] {
                    "API"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a proposal", "    As a user,\r\n    I want to update an existing proposal\r\n    so that I can modi" +
                    "fy the details of a pet proposal.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "PetName",
                            "Prop[Вид тварини]",
                            "Prop[Різновид]",
                            "Prop[Стать]",
                            "Price",
                            "Location",
                            "Age",
                            "AgeUnits",
                            "Summary"});
                table3.AddRow(new string[] {
                            "Cute alpaca needs family",
                            "Alpi",
                            "Інші",
                            "Альпака",
                            "Дівчинка",
                            "100",
                            "New York",
                            "365",
                            "365",
                            "Search for home for Alpi"});
#line 34
  testRunner.Given("I have created a proposal with the following details", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "PetName",
                            "Prop[Вид тварини]",
                            "Prop[Різновид]",
                            "Prop[Стать]",
                            "Price",
                            "Location",
                            "Age",
                            "AgeUnits",
                            "Summary"});
                table4.AddRow(new string[] {
                            "Cool lama needs family",
                            "Lemmy",
                            "Інші",
                            "Лама",
                            "Хлопчик",
                            "1000",
                            "Washington",
                            "120",
                            "30",
                            "Search for home for Lemmy"});
#line 37
  testRunner.When("I update the proposal with the following details", ((string)(null)), table4, "When ");
#line hidden
#line 40
  testRunner.Then("the proposal should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
  testRunner.And("the proposal details should match the updated input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a proposal")]
        [NUnit.Framework.Retry(3)]
        [NUnit.Framework.CategoryAttribute("API")]
        public void DeleteAProposal()
        {
            string[] tagsOfScenario = new string[] {
                    "API"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a proposal", "    As a user,\r\n    I want to delete a proposal\r\n    so that I can remove it from" +
                    " the available listings.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "PetName",
                            "Prop[Вид тварини]",
                            "Prop[Різновид]",
                            "Prop[Стать]",
                            "Price",
                            "Location",
                            "Age",
                            "AgeUnits",
                            "Summary"});
                table5.AddRow(new string[] {
                            "Cute fish sturved for love",
                            "Pan-pan",
                            "Риби",
                            "Сом-панда",
                            "Невідомо",
                            "80",
                            "Chicago",
                            "365",
                            "365",
                            "Search for home for fishy"});
#line 48
  testRunner.Given("I have created a proposal with the following details", ((string)(null)), table5, "Given ");
#line hidden
#line 51
  testRunner.When("I delete the proposal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
  testRunner.Then("the proposal should be deleted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
