// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features.Ui
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Authorization")]
    public partial class AuthorizationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Authorization.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Ui", "Authorization", "\tI want to manage my authorization options\r\n\tso that I can change my password, si" +
                    "gn up, and log in securely.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
  testRunner.Given("I am on the main page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change the password")]
        [NUnit.Framework.CategoryAttribute("Retry(1)")]
        [NUnit.Framework.CategoryAttribute("UI")]
        [NUnit.Framework.Retry(1)]
        public void ChangeThePassword()
        {
            string[] tagsOfScenario = new string[] {
                    "Retry(1)",
                    "UI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change the password", "\tAs a user,\r\n\tI want to change my password\r\n\tso that I can reset it when needed.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 14
  testRunner.When("I click the \'Акаунт\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
  testRunner.And("I click the \'Забули пароль?\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Name"});
                table7.AddRow(new string[] {
                            "label",
                            "Забули пароль?"});
                table7.AddRow(new string[] {
                            "label",
                            "Не хвилюйтесь, ми відправимо Вам код для відновлення паролю на пошту"});
                table7.AddRow(new string[] {
                            "input",
                            "Електронна пошта"});
                table7.AddRow(new string[] {
                            "button",
                            "Надіслати код"});
#line 16
  testRunner.Then("I should see the following elements", ((string)(null)), table7, "Then ");
#line hidden
#line 22
  testRunner.When("I enter \'Maybe an email\' in the input \'Електронна пошта\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
  testRunner.And("I click the \'Забули пароль?\' header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
  testRunner.Then("the input \'Електронна пошта\' should have color \'rgb(255, 0, 0)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
  testRunner.And("the input \'Електронна пошта\' should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
  testRunner.And("the button \'Надіслати код\' should be disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
  testRunner.When("I enter \'Maybe@email.com\' in the input \'Електронна пошта\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
  testRunner.Then("the input \'Електронна пошта\' should have color \'rgb(73, 69, 79)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
  testRunner.And("the input \'Електронна пошта\' should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
  testRunner.And("the button \'Надіслати код\' should be enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
  testRunner.When("I click the \'Надіслати код\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
  testRunner.Then("I should see a successful modal with header \'Посилання надіслано!\' and descriptio" +
                        "n \'Посилання для зміни вашого паролю надіслано на Maybe@email.com.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
  testRunner.When("I click out of the modal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
  testRunner.Then("I should not see the modal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Name"});
                table8.AddRow(new string[] {
                            "label",
                            "Створіть новий пароль"});
                table8.AddRow(new string[] {
                            "label",
                            "Встановіть новий пароль для вашого облікового запису"});
                table8.AddRow(new string[] {
                            "input",
                            "Пароль"});
                table8.AddRow(new string[] {
                            "input",
                            "Повторіть пароль"});
                table8.AddRow(new string[] {
                            "button",
                            "Змінити пароль"});
#line 36
  testRunner.Then("I should see the following elements", ((string)(null)), table8, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "Пароль",
                            "TheFirstPassWord123!"});
                table9.AddRow(new string[] {
                            "Повторіть пароль",
                            "TheSecondOne321?"});
#line 43
  testRunner.When("I enter the following data in the inputs", ((string)(null)), table9, "When ");
#line hidden
#line 47
  testRunner.Then("the button \'Змінити пароль\' should be disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "Пароль",
                            "TheSamePassWord123!"});
                table10.AddRow(new string[] {
                            "Повторіть пароль",
                            "TheSamePassWord123!"});
#line 48
  testRunner.When("I enter the following data in the inputs", ((string)(null)), table10, "When ");
#line hidden
#line 52
  testRunner.Then("the button \'Змінити пароль\' should be enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
  testRunner.When("I click the \'Змінити пароль\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
  testRunner.Then("I should see a successful modal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sign up")]
        [NUnit.Framework.Retry(3)]
        [NUnit.Framework.CategoryAttribute("UI")]
        public void SignUp()
        {
            string[] tagsOfScenario = new string[] {
                    "UI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign up", "\tAs a user,\r\n\tI want to sign up\r\n\tso that I can create a new account.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 61
  testRunner.When("I click the \'Акаунт\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
  testRunner.When("I click the \'Зареєструватися\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Name"});
                table11.AddRow(new string[] {
                            "label",
                            "Привіт!"});
                table11.AddRow(new string[] {
                            "label",
                            "Будь ласка введіть свої дані, щоб зареєструватися"});
                table11.AddRow(new string[] {
                            "input",
                            "Імʼя"});
                table11.AddRow(new string[] {
                            "input",
                            "Прізвище"});
                table11.AddRow(new string[] {
                            "dropdown",
                            "Локація"});
                table11.AddRow(new string[] {
                            "input",
                            "Електронна пошта"});
                table11.AddRow(new string[] {
                            "input",
                            "Пароль"});
                table11.AddRow(new string[] {
                            "input",
                            "Повторіть пароль"});
                table11.AddRow(new string[] {
                            "checkbox",
                            "Я погоджуюся з"});
                table11.AddRow(new string[] {
                            "link",
                            "Політикою конфіденційності та Правилами користування"});
                table11.AddRow(new string[] {
                            "button",
                            "Зареєструватися"});
                table11.AddRow(new string[] {
                            "label",
                            "Вже маєте аккаунт?"});
                table11.AddRow(new string[] {
                            "link",
                            "Вхід"});
#line 63
  testRunner.Then("I should see the following elements", ((string)(null)), table11, "Then ");
#line hidden
#line 78
  testRunner.And("the button \'Зареєструватися\' should be disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "Імʼя",
                            "Auto"});
                table12.AddRow(new string[] {
                            "Прізвище",
                            "Tester"});
#line 79
  testRunner.When("I enter the following data in the inputs", ((string)(null)), table12, "When ");
#line hidden
#line 83
  testRunner.And("I select the \'Харків\' option in the dropdown \'Локація\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table13.AddRow(new string[] {
                            "Електронна пошта",
                            "newuser@e.mail"});
                table13.AddRow(new string[] {
                            "Пароль",
                            "TheSamePassWord123!"});
                table13.AddRow(new string[] {
                            "Повторіть пароль",
                            "TheSamePassWord123!"});
#line 84
  testRunner.And("I enter the following data in the inputs", ((string)(null)), table13, "And ");
#line hidden
#line 89
  testRunner.And("I check the \'Я погоджуюся\' checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
  testRunner.Then("the button \'Зареєструватися\' should be enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
  testRunner.When("I click the \'Зареєструватися\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 92
  testRunner.Then("I should see a successful modal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Log in")]
        [NUnit.Framework.Retry(3)]
        [NUnit.Framework.CategoryAttribute("UI")]
        public void LogIn()
        {
            string[] tagsOfScenario = new string[] {
                    "UI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Log in", "\tAs a user,\r\n\tI want to log in\r\n\tso that I can access my account.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 99
  testRunner.When("I click the \'Акаунт\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Name"});
                table14.AddRow(new string[] {
                            "label",
                            "Привіт знову!"});
                table14.AddRow(new string[] {
                            "label",
                            "Будь ласка введіть свої дані, щоб увійти"});
                table14.AddRow(new string[] {
                            "input",
                            "Електронна пошта"});
                table14.AddRow(new string[] {
                            "input",
                            "Пароль"});
                table14.AddRow(new string[] {
                            "checkbox",
                            "Запам’ятати мене"});
                table14.AddRow(new string[] {
                            "link",
                            "Забули пароль?"});
                table14.AddRow(new string[] {
                            "button",
                            "Увійти"});
                table14.AddRow(new string[] {
                            "link",
                            "Зареєструватися"});
#line 100
  testRunner.Then("I should see the following elements", ((string)(null)), table14, "Then ");
#line hidden
#line 110
  testRunner.When("I enter \'Not an email\' in the input \'Електронна пошта\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
  testRunner.And("I click the \'Пароль\' input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
  testRunner.Then("the input \'Електронна пошта\' should have color \'rgb(255, 0, 0)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
  testRunner.And("the input \'Електронна пошта\' should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
  testRunner.And("the button \'Увійти\' should be disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table15.AddRow(new string[] {
                            "Електронна пошта",
                            "AppSettings[Login]"});
                table15.AddRow(new string[] {
                            "Пароль",
                            "AppSettings[Password]"});
#line 115
  testRunner.When("I enter the following data in the inputs", ((string)(null)), table15, "When ");
#line hidden
#line 119
  testRunner.And("I click the \'Увійти\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
  testRunner.Then("I should see the \'AppSettings[Username]\' link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
